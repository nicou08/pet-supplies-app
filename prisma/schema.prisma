// This is Prisma schema file,

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_LOCAL")
}

model User {
  id            String    @id @default(uuid())
  name          String
  image         String?
  email         String    @unique
  emailVerified DateTime?
  orders        Order[]   @relation("UserToOrder")
  reviews       Review[]  @relation("UserToReview")
  accounts      Account[] @relation("UserToAccount")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation("UserToAccount", fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model ProductType {
  id       String    @id @default(uuid())
  name     String
  products Product[] @relation("ProductToProductType")
}

model PetType {
  id       String    @id @default(uuid())
  name     String
  products Product[] @relation("ProductToPetType")
}

model Product {
  id                 String      @id @default(uuid())
  name               String
  description        String
  price              Float
  inStock            Boolean
  mainImageUrl       String
  secondaryImageUrls String[]
  productTypeId      String
  productType        ProductType @relation("ProductToProductType", fields: [productTypeId], references: [id])
  petTypeId          String
  petType            PetType     @relation("ProductToPetType", fields: [petTypeId], references: [id])
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  orderItems         OrderItem[] @relation("ProductToOrderItem")
  reviews            Review[]    @relation("ProductToReview")
  averageRating      Float       @default(0.0)
  numberOfRatings    Int         @default(0)

  @@index([productTypeId])
  @@index([petTypeId])
}

model Order {
  id              String      @id @default(uuid())
  userId          String
  user            User        @relation("UserToOrder", fields: [userId], references: [id])
  totalPrice      Float
  shippingAddress String
  status          String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  orderItems      OrderItem[] @relation("OrderToOrderItem")

  @@index([userId])
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation("OrderToOrderItem", fields: [orderId], references: [id])
  productId String
  product   Product  @relation("ProductToOrderItem", fields: [productId], references: [id])
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  review    String
  userId    String
  user      User     @relation("UserToReview", fields: [userId], references: [id])
  productId String
  product   Product  @relation("ProductToReview", fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([productId])
}
